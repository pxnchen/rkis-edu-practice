import telebot
from telebot import types
from dialogs import texts_for_base_title, texts_for_base_script, texts_for_useful_script
from emoji import EMOJI_DATA
import code_play
import datetime
import threading

API_TOKEN = '7855332191:AAGHexenIUI_W5O1xQkNH-JYOJJ3BHw2gfk'

user_useful_script_index = {}
user_message_permission = {}


def execution_lock(func):
    def wrapper(message, *args, **kwargs):
        user_id = message.from_user.id
        if user_message_permission.get(user_id, False):
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            return
        user_message_permission[user_id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        try:
            return func(message, *args, **kwargs)
        finally:
            threading.Timer(3, lambda: user_message_permission.update({user_id: False})).start()

    wrapper.__name__ = func.__name__  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    wrapper.__doc__ = func.__doc__  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return wrapper


bot = telebot.TeleBot(API_TOKEN)

bot.set_my_commands([
    types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    types.BotCommand("help_commands", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
    types.BotCommand("base_title", "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –ë–∞–∑–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã"),
    types.BotCommand("base_script", "–ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"),
    types.BotCommand("useful_script", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞"),
    types.BotCommand("about_us", "–û –±–æ—Ç–µ, –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö")
])


@bot.message_handler(commands=['help_commands'])
@execution_lock
def help_command(message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help_commands - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/base_title - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è –ë–∞–∑–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã\n"
        "/base_script - –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n"
        "/useful_script - –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞\n"
        "/get_photo_vulkan - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "/get_sticker - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∏–∑ –º–æ–µ–≥–æ —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫–∞\n"
        "/learn_python - –û—Ç–ø—Ä–∞–≤–∏—Ç PDF —Ñ–∞–π–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Python\n"
        "/example_inline_keyboard - –ü—Ä–∏–º–µ—Ä, Inline Buttons\n"
        "/force_answer - –í—ã–∑–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–≤–µ—Ç (ForceReply)\n"
        "/time - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "/fun_panel - –ü–æ–¥–Ω–∏–º–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å —ç–º–æ—Ü–∏—è–º–∏\n"
        "/about_us - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ\n"
        "–ë–æ—Ç—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Ç–∏–∫–µ—Ä\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–ø—Ä—è–º—É—é."
    )
    bot.send_message(message.chat.id, help_text)


def create_markup_for_text_info(index, action: str, prev: str, nextt: str):
    markup = types.InlineKeyboardMarkup()
    if action == "all":
        btn_prev = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{prev}_{index}")
        btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f"{nextt}_{index}")
        markup.row(btn_prev, btn_next)
    elif action == "next":
        btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f"{nextt}_{index}")
        markup.row(btn_next)
    elif action == "prev":
        btn_prev = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{prev}_{index}")
        markup.row(btn_prev)
    elif action == "all+":
        btn_prev = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{prev}_{index}")
        btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f"{nextt}_{index}")
        btn_play = types.InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"play3_{index}")
        markup.row(btn_prev, btn_play, btn_next)
    elif action == "next_play":
        btn_next = types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥", callback_data=f"{nextt}_{index}")
        btn_play = types.InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"play3_{index}")
        markup.row(btn_play, btn_next)
    elif action == "prev_play":
        btn_prev = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"{prev}_{index}")
        btn_play = types.InlineKeyboardButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data=f"play3_{index}")
        markup.row(btn_prev, btn_play)
    return markup


def create_inline_keyboard():
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="button_pressed")
    button2 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_button")
    markup.row(button1, button2)
    return markup


def select_keyboard_and_text(index_message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if index_message == 0:
        return types.ReplyKeyboardRemove(), "–ö–æ–Ω–µ—Ü –ò–≥—Ä–∞–º"
    elif index_message == 1:
        button1 = types.KeyboardButton("üëä")
        button2 = types.KeyboardButton("‚úå")
        button3 = types.KeyboardButton("‚úã")
        keyboard.add(button1, button2, button3)
        return keyboard, "–ò–≥—Ä–∞ –ö–∞–º–µ–Ω—å –ù–æ–∂–Ω–∏—Ü—ã –ë—É–º–∞–≥–∞"
    elif index_message == 2:
        button1 = types.KeyboardButton("‚ù§Ô∏è")
        button2 = types.KeyboardButton("üíå")
        button3 = types.KeyboardButton("üëé")
        button4 = types.KeyboardButton("üö´")
        keyboard.add(button1, button2, button3, button4, row_width=4)
        return keyboard, "–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ª—é–±–æ–≤—å!!!"


@bot.message_handler(commands=['about_us'])
@execution_lock
def help_about(message):
    text = """

–ß–µ–º —Ç–µ–±–µ –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?

–¢—É—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å –ë–ê–ó–û–í–´–ï —Å–ø–æ—Å–æ–±—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∏–±–ª–∏–æ—Ç–∫–∏ pyTelegramBotAPI
–ù–∞—É—á–∏—à—å—Å—è: –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ—Å–æ–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–¥ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ

–ü–æ—á—Ç–∏ –Ω–∞ –ª—é–±—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –±–æ—Ç —Å–∫–∏–¥—ã–≤–∞–µ—Ç –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
–ë–æ—Ç—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ—ë –æ–±—Ä–∞—Ç–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä, –æ–Ω –µ–≥–æ —Ç–æ–∂–µ –≤–µ—Ä–Ω–µ—Ç
–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –º–æ–∂–Ω–æ –±–æ—Ç–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, —á–µ—Ä–µ–∑ 
/useful\_script
–í –±–æ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ª—é–±–æ–≥–æ —Å–ø–∞–º–∞
–ë–æ—Ç –Ω–µ –ª—é–±–∏—Ç –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –ø–æ—ç—Ç–æ–º—É –æ–Ω –∏—Ö —É–¥–∞–ª—è–µ—Ç
–ë–æ—Ç –∫—Ä–∞—Å–∏–≤—ã–π, —É–º–Ω–∏—á–∫–∞, –º–æ–≥–µ—Ç...

–ù–∞–¥ –ø—Ä–æ–µ—Ç–æ–º —Ç—Ä—É–¥–∏–ª—Å—å –æ—Ç–∑—ã–≤—á–∏–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –º–æ–∂–µ—à—å –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∏—Ö:
`2202 2050 8788 1279` - –°–±–µ—Ä
skutaligor@gmail.com - –ü–æ—á—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏

–° —É–≤–∞–∂–µ–Ω–∏–µ–º
By @TronSkiviRu 
- –°–∫—É—Ç–∞–ª—å –ò–≥–æ—Ä—å –í–∏—Ç–∞–ª—å–µ–≤–∏—á¬©

By @Rina8880
- –õ–∞–ø—Ç–µ–≤–∞ –ê—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞¬©

By @pxnchen
- –ü–∞–Ω—á–µ–Ω–∫–æ –ù–∏–∫–æ–ª–∞–π –ò–≤–∞–Ω–æ–≤–∏—á¬©
    """
    bot.send_message(message.chat.id, text, parse_mode="Markdown")


# reply_markup=get_reply_keyboard()


@execution_lock
@bot.message_handler(commands=['start'])
def start(message):
    text = """
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–∑–≤–∞–Ω —Ç–µ–±—è –æ–±—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–æ–≤ –Ω–∞ Python.

–ü–∏—à–∏ /help_commands, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞.
–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –≤–≤–µ–¥–∏ /base_title, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ.

–¢–∞–∫–∂–µ —Ç–µ–±—è –±—É–¥—É—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∏–∑—É, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–¥ –≤ —Å–∞–º–æ–º Python.

–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:

<pre>
@bot.message_handler(commands=['start'])
def start(message):
    text = '''
    # –¢—É—Ç –±—ã–ª–æ –ø—Ä–µ–¥–∏—Å–ª–æ–≤–∏–µ
    '''
    bot.send_message(message.chat.id, text, reply_markup=get_reply_keyboard(), parse_mode="Markdown")

</pre>
"""
    bot.send_message(message.chat.id, text, parse_mode="HTML")
    help_about(message)


@bot.message_handler(commands=['base_title'])
@execution_lock
def send_navigation1(message):
    index = 0
    bot.send_message(message.chat.id, texts_for_base_title[index],
                     reply_markup=create_markup_for_text_info(index, "next", "prev1", "next1"),
                     parse_mode="Markdown", disable_web_page_preview=True)


@bot.message_handler(commands=['base_script'])
@execution_lock
def send_navigation2(message):
    index = 0
    bot.send_message(message.chat.id, texts_for_base_script[index],
                     reply_markup=create_markup_for_text_info(index, "next", "prev2", "next2"),
                     parse_mode="Markdown")


@bot.message_handler(commands=['useful_script'])
@execution_lock
def send_navigation3(message):
    index = 0
    if user_useful_script_index.get(message.from_user.id, 0) == 0:
        user_useful_script_index[message.from_user.id] = 0
        do_action = "next"
    else:
        do_action = "next_play"
    bot.send_message(message.chat.id, texts_for_useful_script[index],
                     reply_markup=create_markup_for_text_info(index, do_action, "prev3", "next3"),
                     parse_mode="Markdown")


@bot.message_handler(commands=['get_photo_vulkan'])
@execution_lock
def inline(message):
    bot.reply_to(message, "–°–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫—Ä–∞—Å–∏–≤—ã–π –≤—É–ª–∫–∞–Ω; —ç—Ç–æ –æ—Ç–≤–µ—Ç  –Ω–∞ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    try:
        with open('PW 2.5/vulkan.png', 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption="–≠—Ç–æ –ø–æ–¥–ø–∏—Å—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")


@bot.message_handler(commands=['cat'])
@execution_lock
def send_cat_photo(message):
    cat_str = code_play.send_random_cat()
    profile = code_play.generate_profile()
    bot.send_photo(message.chat.id, cat_str, caption=profile)


@bot.message_handler(content_types=['photo'])
@execution_lock
def echo_photo(message):
    photo_id = message.photo[-1].file_id
    bot.send_photo(message.chat.id, photo_id)


@bot.message_handler(content_types=['sticker'])
@execution_lock
def echo_sticker(message):
    sticker_id = message.sticker.file_id
    bot.reply_to(message, "–ê–π–¥–∏ —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞: " + sticker_id)
    bot.send_sticker(message.chat.id, sticker_id)


@bot.message_handler(commands=['get_sticker'])
@execution_lock
def send_sticker(message):
    sticker_id = 'CAACAgIAAxkBAAIBqmgi_zt-MU8bStQBr-a7urNighUnAALYGAACO7hBSM-pC_BdrnNtNgQ'
    bot.send_sticker(message.chat.id, sticker_id)


@bot.message_handler(commands=['learn_python'])
@execution_lock
def send_document(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
    bot.send_chat_action(chat_id, action='upload_document')
    try:
        with open('PW 2.5/learnPython.pdf', 'rb') as doc:
            bot.send_document(message.chat.id, doc, caption="–í—ã—É—á–∏ Python –∑–∞ –º–µ—Å—è—Ü!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")


@execution_lock
@bot.message_handler(commands=['force_answer'])
def force_reply(message):
    markup = types.ForceReply()
    bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=markup)


@execution_lock
@bot.message_handler(commands=['time'])
def send_time(message):
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")


@execution_lock
@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
def remove_keyboard(message):
    bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['location'])
def handle_location(message):
    loc = message.location
    bot.send_message(message.chat.id,
                     f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é:\n–®–∏—Ä–æ—Ç–∞: {loc.latitude}\n–î–æ–ª–≥–æ—Ç–∞: {loc.longitude}")


@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    contact = message.contact
    bot.send_message(message.chat.id,
                     f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {contact.first_name}\n–ù–æ–º–µ—Ä: {contact.phone_number}")


@bot.message_handler(commands=['/to_be_a_millionaire'])
def be_millionaire(message):
    try:
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.message_id}: {e}")


@bot.callback_query_handler(func=lambda call:
call.data.startswith('next') or call.data.startswith('prev') or call.data.startswith('play'))
def handle_navigation(call):
    user_id = call.from_user.id
    global str_return, str_prev, str_next
    data = call.data
    try:
        action, index_str = data.split("_")
        current_index = int(index_str)
    except ValueError:
        return

    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ next1
    action, number_arr_dialogs = action[:-1], action[-1]

    if number_arr_dialogs == "1":
        str_return = texts_for_base_title
        str_prev = "prev1"
        str_next = "next1"
    elif number_arr_dialogs == "2":
        str_return = texts_for_base_script
        str_prev = "prev2"
        str_next = "next2"
    elif number_arr_dialogs == "3":
        str_return = texts_for_useful_script
        str_prev = "prev3"
        str_next = "next3"

    new_index = current_index
    action_for_base_title = "all"
    action_for_useful_script = "all+"
    if action == "next":

        new_index = current_index + 1
        if new_index >= len(str_return):
            new_index = current_index - 1
        elif new_index == len(str_return) - 1:
            action_for_base_title = "prev"
            if user_useful_script_index.get(user_id, 0) == new_index:
                action_for_useful_script = "prev"
            else:
                action_for_useful_script = "prev_play"
        else:
            if user_useful_script_index.get(user_id, 0) == new_index:
                action_for_useful_script = "all"
            else:
                action_for_useful_script = "all+"
    elif action == "prev":
        new_index = current_index - 1
        if new_index < 0:
            new_index = 0
        if new_index == 0:
            action_for_base_title = "next"
            if user_useful_script_index[user_id] == new_index:
                action_for_useful_script = "next"
            else:
                action_for_useful_script = "next_play"
        else:
            if user_useful_script_index[user_id] == new_index:
                action_for_useful_script = "all"
            else:
                action_for_useful_script = "all+"

    if number_arr_dialogs == "3":
        this_action = action_for_useful_script
    else:
        this_action = action_for_base_title
    if action == "play":
        user_useful_script_index[user_id] = new_index
        bot.edit_message_text(
            str_return[current_index],
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown",
            reply_markup=create_markup_for_text_info(current_index, action_for_base_title, str_prev, str_next)
        )
        reply_markup_func, name_play = select_keyboard_and_text(current_index)
        bot.send_message(call.message.chat.id, name_play, reply_markup=reply_markup_func)
        if current_index == 2:
            send_cat_photo(call.message)
    else:
        bot.edit_message_text(
            str_return[new_index],
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown",
            reply_markup=create_markup_for_text_info(new_index, this_action, str_prev, str_next),
            disable_web_page_preview=True
        )
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data in ['btn1', 'btn2'])
def handle_inline_buttons(call):
    if call.data == 'btn1':
        bot.answer_callback_query(call.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1")
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1")
    elif call.data == 'btn2':
        bot.answer_callback_query(call.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 2")
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É 2")


@bot.callback_query_handler(func=lambda call: call.data in ("button_pressed", "back_button"))
def callback_handler(call):
    if call.data == "button_pressed":
        bot.answer_callback_query(call.id, "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!")
        bot.send_message(call.message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É.")
    elif call.data == "back_button":
        bot.answer_callback_query(call.id, "–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –Ω–∞–∂–∞—Ç–∞!")
        bot.send_message(call.message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


@bot.message_handler(commands=['example_inline_keyboard'])
def start_command(message):
    markup = create_inline_keyboard()
    bot.send_message(
        chat_id=message.chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.",
        reply_markup=markup
    )


@bot.message_handler(commands=['fun_panel'])
def send_welcome(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    button1 = types.KeyboardButton("üòÇ")
    button2 = types.KeyboardButton("ü§©")
    button3 = types.KeyboardButton("üòç")
    button4 = types.KeyboardButton("üòú")

    keyboard.add(button1, button2)
    keyboard.add(button3, button4)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)


@bot.message_handler(func=lambda message:
message.text in ("‚ù§Ô∏è", "üíå", "üëé", "üö´") and user_useful_script_index.get(message.from_user.id, 0) == 2)
def handle_message(message):
    emoji = message.text
    if emoji == "‚ù§Ô∏è":
        bot.send_message(message.chat.id, "–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif emoji == "üíå":
        bot.send_message(message.chat.id, "–ó–∞–º—É—Ä—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞")
    elif emoji == "üëé":
        pass
    elif emoji == "üö´":
        bot.send_message(message.chat.id, "–í—ã –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏—Å—å")
    send_cat_photo(message)


@bot.message_handler(func=lambda message:
message.text in ("üëä", "‚úã", "‚úå") and user_useful_script_index.get(message.from_user.id, 0) == 1)
@execution_lock
def handle_message(message):
    player_move = message.text
    bot_move = code_play.select_item()
    info_str = code_play.result(player_move, bot_move)
    bot.send_message(message.chat.id, bot_move)
    bot.send_message(message.chat.id, info_str)


@bot.message_handler(func=lambda message: message.text in ("üòÇ", "ü§©", "üòç", "üòú"))
def handle_message(message):
    bot.reply_to(message, "üëç", reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['text', 'animation'])
@execution_lock
def delete_text_message(message):
    if message.text in EMOJI_DATA:
        return
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()